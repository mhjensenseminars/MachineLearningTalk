TITLE: Making sense of sensing? 
AUTHOR: Morten Hjorth-Jensen {copyright, 1999-present|CC BY-NC} at Department of Physics, University of Oslo, Norway
DATE: April 14, 2025



!split
===== Motivation and Content =====

These notes aim at linking entanglement in quantum mechanical systems
with quantum sensing using simple examples.  Numerical codes are
included in order to illustrate basic elements of sensing.  The
examples are tailored to simple one- and two-qubit systems. The
material contains (April  14, 2025))
o One-qubit system with basic elements of sensing
o Linking analytically solvable case with many-qubit entanglement and sensing
o Simple two-particle (or two-qubit) system to demonstrate entanglement and its links with sensing
o Numerical codes for simple time-dependent interactions for one and two qubits

!split
===== More material will be added =====

In particular, we will include
* Quantum computing simulations of the above systems where the measurement is done on only one qubit
* Discussion of Fisher entropy and other measures

Feel free to come with suggestions for additions. You can access the material as a jupyter-notebook at URL:"https://github.com/mhjensenseminars/MachineLearningTalk/blob/master/doc/pub/sensing/ipynb/sensing.ipynb" or as a PDF file at URL:"https://github.com/mhjensenseminars/MachineLearningTalk/blob/master/doc/pub/sensing/pdf/sensing.pdf"

!split
===== Literature =====

In the discussions here we have borrowed extensively from two Review of Modern Physics
articles
o _Quantum sensing_, C.L. Degen, F. Reinhard, and P. Cappellaro, Reviews of  Modern  Physics _89_, 035002 (2017), see URL:"https://journals.aps.org/rmp/abstract/10.1103/RevModPhys.89.035002"
o _Quantum metrology with nonclassical states of atomic ensembles_, L. Pezzè, A. Smerzi, M.K. Oberthaler, R. Schmied, and P. Treutlein, Reviews of  Modern  Physics _90_, 035005 (2018), see URL:"https://journals.aps.org/rmp/abstract/10.1103/RevModPhys.90.035005"
o See also recent work by Liu et at URL:"https://www.nature.com/articles/s41534-021-00507-x". We may add codes which simulate these systems as well, stay tuned.



!split
===== Basics of quantum sensing =====
!bblock
In quantum sensing, _readout functions_ refer to the methods used to
extract information about the quantum system after a series of
operations or measurements have been performed.
!eblock 

!bblock
The readout process
typically involves measuring the state of quantum bits (qubits) or
other quantum observables, and this information is then used to infer
physical quantities such as time, magnetic fields, temperature, or
other parameters being sensed.
!eblock


!split
===== Example of Readout Functions in Quantum Sensing =====


!bblock
_A common example in quantum sensing involves measuring the state of a
qubit after it has interacted with some external field or force._ The
quantum sensor’s response is determined by how the qubit state evolves
due to the applied field, and the readout function is the measurement
procedure that allows us to extract this information.
!eblock


!split
===== Example 1: Quantum Magnetometry with a Single Qubit =====


!bblock
Let’s consider a typical scenario of quantum magnetometry using a
single qubit that interacts with a magnetic field. We will use the
concept of quantum state measurement as a readout function to infer
the value of the magnetic field.
!eblock




!split
=====  Step 1: Initial Qubit State =====


In this example, we use a spin-1/2 system (e.g., a qubit) that is
sensitive to an external magnetic field. A common method of performing
quantum sensing is to apply a quantum gate (e.g., a rotation) to the
qubit and then measure its state.


Assume the initial state of the qubit is
!bt
\[
\vert \psi \rangle = \alpha \vert 0\rangle + \beta |1\rangle,
\]
!et

where $\alpha$ and $\beta$ are complex
amplitudes, and $\vert 0\rangle$ and $\vert 1\rangle$
are the computational basis
states.


!split
===== Step 2: Interaction with External Field =====



When a magnetic field is applied to the qubit, it will induce a phase
shift in the qubit’s state. The evolution of the qubit’s state can be
modeled using the time evolution operator U(t), which depends on the
interaction with the magnetic field. The evolution can be described
as:
!bt
\[
U(t) = \exp{-\imath  \mathcal{H} t}
\]
!et

where $\mathcal{H}$ is the Hamiltonian of the qubit system, which in
the case of a spin-1/2 particle in a magnetic field $B$ could be
!bt
\[
\mathcal{H} =-\gamma B \hat{S}_z,
\]
!et
with $\gamma$ being the gyromagnetic ratio and
$\hat{S}_z$ being the spin operator along the $z$-axis.


!split
===== As time evolves =====

After time t, the qubit’s state becomes:

!bt
\[
\vert \psi(t) \rangle = \alpha \vert 0\rangle + \beta \exp{-i \gamma B t} \vert 1\rangle,
\]
!et

Here, the phase shift $\exp^{-i \gamma B t}$ accumulates depending on the applied magnetic field $B$.

!split
===== Step 3: Measurement (Readout Function) =====


After the interaction with the magnetic field, the next step is to
measure the qubit. The readout function involves projecting the
quantum state onto a measurement basis, often the computational basis
$\{|0\rangle, |1\rangle\}$. The outcome of the measurement can then be
used to infer information about the external field.

!split
===== Measurement Probability =====

_Measurement Probability_: The probability of measuring the state
$\vert 0\rangle$  or $\vert 1\rangle$ is given by the squared modulus of the
corresponding amplitudes.

o Probability of measuring $\vert 0\rangle$: $P(0) = |\alpha|^2$

o Probability of measuring $\vert 1\rangle$: $P(1) = |\beta \exp{-i \gamma B t}|^2 = |\beta|^2$

!split 
===== Readout Function =====


_Readout Function_: The measurement outcome corresponds to a result that
is used to estimate the magnetic field. For instance, if the qubit
undergoes a rotation due to the magnetic field, the phase shift in the
qubit’s state can be used to infer the magnetic field
strength. Typically, a series of measurements and repeated experiments
are performed to average out the noise and obtain a precise estimate
of B.


!split
===== Example 2: Using a Readout Function to Estimate Parameters =====



Let’s say the qubit’s state before the measurement is in a
superposition state, and we want to determine the magnetic field
strength by reading out the qubit’s state. After the qubit has
undergone the evolution $U(t)$, we measure it in the computational basis
and repeat the experiment many times to obtain the average outcome.



We could perform parameter estimation by measuring the expected value
of some observable (e.g., $\hat{S}_z)$ and comparing the outcomes to
theoretical predictions.

!split
===== Expectation value of $\hat{S}_z$ =====

For example, the expectation value of $\hat{S}_z$ (the spin along the $z$-axis)
in the state $\vert \psi(t) \rangle$ is:
!bt
\[
\langle \hat{S}_z \rangle = \langle \psi(t) \vert \hat{S}_z \vert \psi(t) \rangle = \frac{1}{2} \left( |\alpha|^2 - |\beta|^2 \right),
\]
!et


!split
===== Phase shift =====

Since the magnetic field causes a phase shift $\exp{-i \gamma B t}$, the
measurement of the expectation value of $\hat{S}_z$ gives us a way to
infer the magnetic field $B$. By performing a series of measurements and
comparing the observed values to theoretical models, we can estimate
the field strength $B$.





!split
===== One-qubit system =====

In the first part of these notes, we will analyze our systems using
plain diagonalization and simple analytical manipulations.  Thereafter
we will develop codes and material for performing a quantum computing
simulation of the same systems (this material is not yet ready).

Our first encounter is a simple one-qubit system, described by a simple $2\times 2$ Hamiltonian.

We start with a simple $2\times 2$ Hamiltonian matrix expressed in
terms of Pauli $\bm{X}$, $\bm{Y}$  and $\bm{Z}$ matrices. But before we proceed, a simple reminder is appropriate.

!split
===== Definitions: Single qubit gates =====

The Pauli matrices (and gate operations following therefrom) are defined as
!bt
\[
	\bm{X} \equiv \sigma_x = \begin{bmatrix}
		0 & 1 \\
		1 & 0
	\end{bmatrix}, \quad
	\bm{Y} \equiv \sigma_y = \begin{bmatrix}
		0 & -i \\
		i & 0
	\end{bmatrix}, \quad
	\bm{Z} \equiv \sigma_z = \begin{bmatrix}
		1 & 0 \\
		0 & -1
	\end{bmatrix}.
\]
!et

!split
===== Pauli gates =====

The Pauli-$\bm{X}$ gate is also known as the _NOT_ gate, which flips the state of the qubit.
!bt
\begin{align*}
	\bm{X}\vert 0\rangle &= \vert 1\rangle, \\
	\bm{X}\vert 1\rangle &= \vert 0\rangle.	
\end{align*}
!et
The Pauli-$\bm{Y}$ gate flips the bit and multiplies the phase by $ i $. 
!bt
\begin{align*}
	\bm{Y}\vert 0\rangle &= i\vert 1\rangle, \\
	\bm{Y}\vert 1\rangle &= -i\vert 0\rangle.
\end{align*}
!et
The Pauli-$\bm{Z}$ gate multiplies only the phase of $\vert 1\rangle$ by $ -1 $.
!bt
\begin{align*}
	\bm{Z}\vert 0\rangle &= \vert 0\rangle, \\
	\bm{Z}\vert 1\rangle &= -\vert 1\rangle.
\end{align*}
!et

!split
===== Hadamard gate =====

The Hadamard gate is defined as
!bt
\[
	\bm{H} = \frac{1}{\sqrt{2}} \begin{bmatrix}
		1 & 1 \\
		1 & -1
	\end{bmatrix}.
\]
!et

It creates a superposition of the $ \vert 0\rangle $ and $ \vert 1\rangle $ states.
!bt
\begin{align}
	\bm{H}\vert 0\rangle &= \frac{1}{\sqrt{2}} \left( \vert 0\rangle + \vert 1\rangle \right), \\
	\bm{H}\vert 1\rangle &= \frac{1}{\sqrt{2}} \left( \vert 0\rangle - \vert 1\rangle \right).
\end{align}
!et
Note that we will use $H$ as symbol for the Hadamard gate while we will reserve the notation $\mathcal{H}$ for a given Hamiltonian.


!split
===== Sensing Hamiltonian =====


For our discussions, we will assume that the quantum sensor can be
described by the generic Hamiltonian (we follow here Degen *et al.,*)
!bt
\[
\mathcal{H}(t) = \mathcal{H}_0 + \mathcal{H}_I(t) + \mathcal{H}_\mathrm{control}(t),
\]
!et

where $\mathcal{H}_0$ is the internal Hamiltonian, $\mathcal{H}_I(t)$ is the
Hamiltonian associated with a signal ($V(t)$ in the notes below), and
$\mathcal{H}_\mathrm{control}(t)$ is the control Hamiltonian.  Following
the above mentioned authors, we will assume that $\mathcal{H}_0$ is known
and that $\mathcal{H}_\mathrm{control}(t)$ can be chosen so as to
manipulate or tune the sensor in a controlled way.

The goal of a quantum sensing experiment is then to infer $V(t)$ from
the effect it has on the actual qubits via its Hamiltonian
$\mathcal{H}_I(t)$, usually by a specific choice of
$\mathcal{H}_\mathrm{control}(t)$.


!split
===== Time-dependent Hamiltonian matrix =====

We define a  hermitian  matrix  $\mathcal{H}\in {\mathbb{C}}^{2\times 2}$
!bt
\[
\mathcal{H} = \begin{bmatrix} \mathcal{H}_{11} & \mathcal{H}_{12} \\ \mathcal{H}_{21} & \mathcal{H}_{22}
\end{bmatrix}.
\]
!et
We  let $\mathcal{H} = \mathcal{H}_0 + \mathcal{H}_I$, where
!bt
\[
\mathcal{H}_0= \begin{bmatrix} E_0 & 0 \\ 0 & E_1\end{bmatrix},
\]
!et
is a diagonal matrix. Similarly,
!bt
\[
\mathcal{H}_I(t)= \begin{bmatrix} V_{11}(t) & V_{12}(t) \\ V_{21}(t) & V_{22}(t)\end{bmatrix},
\]
!et
where $V_{ij}(t)$ represent various time-dependent interaction matrix elements and since we have a hermitian matrix, we require that
$V_{21}=V_{12}^*$.


!split
===== Interaction part =====

We will now label  the interaction matrix elements, assuming that they have an explicit time dependence.
We define
!bt
\begin{align*}
V_{11} & = V_z(t)\\
V_{22} & = -V_z(t)\\
V_{12} & = V_x(t)-\imath V_y(t).
\end{align*}
!et

In the numerical example below we let $V_y(t)=0$, $V_z(t) = tV_z$
and $V_x(t) = tV_x$ with $V_z$ and $V_x$ being real-valued constants to
be determined. In the same numerical example we let $t\in [0,1]$.

!split
===== Non-interacting solution =====

We can view $\mathcal{H}_0$ as the non-interacting solution
!bt
\[
       \mathcal{H}_0\vert 0 \rangle =E_0\vert 0 \rangle,
\]
!et
and
!bt
\[
       \mathcal{H}_0\vert 1\rangle =E_1\vert 1\rangle,
\]
!et
where we have defined the orthogonal computational one-qubit basis states $\vert 0\rangle$ and $\vert 1\rangle$.

!split
===== Rewriting with Pauli matrices =====

We rewrite $\mathcal{H}$ (and $\mathcal{H}_0$ and $\mathcal{H}_I$)  via Pauli matrices
!bt
\[
\mathcal{H}_0 = \mathcal{E}_{\mathrm{avg}} I -\Delta E \bm{Z}, \quad \mathcal{E}_{\mathrm{avg}} = \frac{E_0
  + E_1}{2}, \; \Delta E = \frac{E_1-E_0}{2},
\]
!et
and
!bt
\[
\mathcal{H}_I = V_z(t)\bm{Z} + V_x(t)\bm{X}+V_y(t)\bm{Y},
\]
!et
with $V_z(t) = V_{11}=-V_{22}$, $V_x(t) = \Re (V_{12})$ and $V_y(t) = \Im (V_{12})$.

This is the expression we will discuss in connection with quantum computing simulations. The discussions here, focus mainly on some simpler analytical considerations and simplifications. The numerical solutions are also given by standard eigenvalue solvers.

!split
===== Simple time dependence =====
We let our Hamiltonian depend linearly on time  $t$

!bt
\[
\mathcal{H}=\mathcal{H}_0+t \mathcal{H}_\mathrm{I},
\]
!et

with $t \in [0,1]$, where the limits $t=0$ and $t=1$
represent the non-interacting (or unperturbed) and fully interacting
system, respectively. This means that the various potential terms are given by $V_i(t)=tV_i$, with $i=\{x,y,z\}$ and $V_i$ are real-valued constants.

!split
===== Exact solution =====

Since this a simple $2\times 2$ matrix eigenvalue problem we find the eigenvalues $\lambda_0$ and $\lambda_1$ to be
!bt
\[
\lambda_{0,1}=\mathcal{E}_{\mathrm{avg}}\pm \Delta E\sqrt{1+\frac{2V_z(t)}{\Delta E}+\frac{1}{\Delta E^2}(V_z^2(t)+V_x^2(t)+V_y^2(t))}.
\]
!et

If we assume that $\Delta E \gg V_z(t)$ and set $V_x(t)=V_y(t)=0$ for
simplicity and Taylor-expand our square root expression, we obtain
!bt
\[
\lambda_{0}=E_0-\frac{1}{2}V_z(t),
\]
!et
!bt
\[
\lambda_{1}=E_1+\frac{1}{2}V_z(t),
\]
!et
where we kept only terms up to $\Delta E$. The above problem can however be easily solved numerically, see the code here.



!split
===== Selecting parameters =====

The model is an eigenvalue problem with only
two available states.

Here we set the parameters $E_0=0$,
$E_1=4$, $V_{11}=-V_{22}=3$ and $V_{12}=V_{21}=0.2$.

The non-interacting solutions represent our computational basis.
Pertinent to our choice of parameters, is that at $t\geq 2/3$,
the lowest eigenstate is dominated by $\vert 1\rangle$ while the upper
is $\vert 0 \rangle$. At $t=1$ the $\vert 0 \rangle$ mixing of
the lowest eigenvalue is $1\%$ while for $t\leq 2/3$ we have a
$\vert 0 \rangle$ component of more than $90\%$.  The character of the
eigenvectors has therefore been interchanged when passing $z=2/3$. The
value of the parameter $V_{12}$ represents the strength of the coupling
between the two states.  Here we keep only the real part of the non-diagonal term.

!split
=====  Setting up the matrix for the simple one-qubit system =====

Here we solve the above problem as a standard eigenvalue problem (best seen using the jupyter-notebook)

!bc pycod
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns; sns.set_theme(font_scale=1.5)
from tqdm import tqdm

sigma_x = np.array([[0, 1], [1, 0]])
sigma_y = np.array([[0, -1j], [1j, 0]])
sigma_z = np.array([[1, 0], [0, -1]])
I = np.eye(2)

def Hamiltonian(lmb):
    E0 = 0
    E1 = 4
    V11 = 3
    V22 = -3
    V12 = 0.2
    V21 = 0.2

    eps = (E0 + E1) / 2
    omega = (E0 - E1) / 2
    c = (V11 + V22) / 2
    omega_z = (V11 - V22) / 2
    omega_x = V12

    H0 = eps * I + omega * sigma_z
    H1 = c * I + omega_z * sigma_z + omega_x * sigma_x
    return H0 + lmb * H1
    
lmbvalues_ana = np.arange(0, 1, 0.01)
eigvals_ana = np.zeros((len(lmbvalues_ana), 2))
for index, lmb in enumerate(lmbvalues_ana):
    H = Hamiltonian(lmb)
    eigen, eigvecs = np.linalg.eig(H)
    permute = eigen.argsort()
    eigvals_ana[index] = eigen[permute]
    eigvecs = eigvecs[:,permute]


fig, axs = plt.subplots(1, 1, figsize=(10, 10))
for i in range(2):
    axs.plot(lmbvalues_ana, eigvals_ana[:,i], label=f'$E_{i}$')
axs.set_xlabel(r'$\lambda$')
axs.set_ylabel('Energy')
axs.legend()
plt.show()

!ec


!split
===== Sensing protocol, taken from  Degen *et al.,* =====

!bblock
o The quantum sensor is initialized in some known basis, say $\vert 0\rangle$.
o The quantum sensor is transformed into the desired inittial state $\vert \psi_{\mathrm{Initial}}\rangle$, through an appropriate transformation $\bm{U}_1$. For a single qubit system this could be a Hadamard gate which results in a linear superposition of $\vert 0\rangle$ and $\vert 1\rangle$.
o The quantum sensor evolves under the Hamiltonian $\mathcal{H}$ for a time $t$. At the end of the sensing period, the sensor is in its final stage (see below) $\vert\psi(t)\rangle=\bm{U}_{\mathcal{H}}(t, 0)\left|\psi_{\mathrm{Initial}}\right\rangle$
o This quantum state is transformed into a superposition of observable readout states, say a superposition of the one=qubit states $\vert 0\rangle$ and $\vert 1\rangle$, via the action $\bm{U}_2\vert \psi(t)$.
o The final state of the quantum sensor is read out.
o Steps 1-5 are repeated and averaged over a large number of cycles $N$ to estimate the final transition probabilities $p$.
o The transition probability $p$ is measured as a function of time $t$ and used to infer to desired signal $V(t)$.
!eblock





!split
===== Initialization and sensing analysis, Ramsey measurement =====

We stay now with the Taylor-approximated solution from the simple
example above (the one-qubit case). We do so in order to illustrate
some of the basic sensing ideas.

To initialize a given system to a known quantum state, we first start
with a known initial state $|0\rangle$. Then, depending on the type of
information that we want to learn about the stimulus, the measurement
scheme to be used, and the physical implementation of the quantum
system, we choose some unitary operator $\bm{U}_{\mathrm{Initial}}$ such that
it transforms our state $|0\rangle$ to a desired initial superposition
state $\left|\psi_{\mathrm{Initial}}\right\rangle=a|0\rangle+b|1\rangle$
for some $a, b \in \mathbb{C}$ such that $|a|^{2}+|b|^{2}=1$.

!split
===== Effects of stimulus =====

After the sensing state is initialized, it is exposed to the
environment and evolves according to the time-evolution operator of
the sensing Hamiltonian via the unitary transformation $\bm{U}_{\mathcal{H}}$ as (setting $\hbar=c=e=1$)

!bt
\[
|\psi(t)\rangle=\bm{U}_{\mathcal{H}}(t, 0)\left|\psi_{\mathrm{Initial}}\right\rangle.
\]
!et

In general we have
!bt
\[ \bm{U}_{\mathcal{H}}=\exp{(\imath\int_{0}^{t}
\mathcal{H}(\tau) d \tau)}.
\]
!et

Here the Hamiltonian could be a
complicated, non-analytical function with a time-dependent $V(t)$
(making $\mathcal{H}$ time-dependent as well).


!split
===== Slowly changing potential =====

In the case where $V(t)$ is constant or changes much more slowly than our sensing integration time, we can assume
!bt
\[
|\psi(t)\rangle=\bm{U}_{\mathcal{H}}(t, 0)\left|\psi_{\mathrm{Initial}}\right\rangle=\exp{(\imath t \mathcal{H})}\left|\psi_{\mathrm{Initial}}\right\rangle.
\]
!et
The sensing state evolves thus as
!bt
\[
|\psi(t)\rangle=\left(\exp{\imath t\left(E_{0}-\frac{1}{2}  V_z\right)}\left|\lambda_{0}\right\rangle\left\langle\lambda_{0}\right|+\exp{\imath t\left(E_{1}+\frac{1}{2}  V_z\right)}\left|\lambda_{1}\right\rangle\left\langle\lambda_{1}\right|\right)\left|\psi_{\mathrm{Initial}}\right\rangle,
\]
!et
where we have using the spectral decomposition and the final representation of the
sensing Hamiltonian found above.

!split
===== Readout =====

After the sensing state has evolved over time in the presence of $V(t)$, it
can be transformed again before a measurement is taken. The first
part, the transformation to some desired read-out state, is performed
by a readout  operator, see discussions in Degen et al., 2017) where
!bt
\[
\left|\psi_{\mathrm{Final}}\right\rangle=\bm{U}_{\mathrm{Readout}}|\psi(t)\rangle.
\]
!et

Here the readout operator $\bm{U}_{\mathrm{Readout}}$ is left unspecified.

!split
===== Measurement =====

A measurement of this final state $\left|\psi_{\mathrm{Final}}\right\rangle=a^{\prime}|0\rangle+b^{\prime}|1\rangle$ is made with
respect to the basis $\{|0\rangle,|1\rangle\}$ where
$|0\rangle$ is measured with  probability
!bt
\[
\left|\left\langle 0 \mid \psi_{\mathrm{Final}}\right\rangle\right|^{2}=\left|a^{\prime}\right|^{2},
\]
!et
and $|1\rangle$ is measured with probability 
!bt
\[
\left|\left\langle 1 \mid\psi_{\mathrm{Final}}\right\rangle\right|^{2}=\left|b^{\prime}\right|^{2}.
\]
!et


After this measurement, the sensing state has collapsed into one
of the basis states and  no more information can be gained.

!split
===== Multiple measurements =====

However, by having
multiple quantum sensing elements time-evolving together or by
repeating the process many times before the external stimulus $V(t)$
can change, a transition probability
!bt
\[
p_{|0\rangle\rightarrow|1\rangle}=\left|\left\langle 1 \mid \psi_{\mathrm{Final}}\right\rangle\right|^{2}=\left|b^{\prime}\right|^{2},
\]
!et
can be estimated. The *sensing* is then achieved by taking a
series of these transition probabilities as a time series, and then
using the results to estimate the sensed stimulus $V(t)$, see for example the abovementioned review of
Degen et al., 2017.


!split
===== Example =====

The simplest mathematical example of quantum sensing is sensing an
external stimulus's effect on the splitting of the energy levels of an
isolated system. Suppose our stimulus is constant and *parallel* with
our sensor, that is we set  $V_z(t)=V_{0}$ and $V_x=0$, and we choose
our initialization and readout preparation operators to be the famous
Hadamard gate

!bt
\[
\bm{U}_{H}=\frac{1}{\sqrt{2}}\left[\begin{array}{cc}
1 & 1 \\
1 & -1
\end{array}\right].
\]
!et

Here, the subscript $H$ stands for the Hadamard unitary transformation.

!split
===== Evolution of initial state =====

The initial state is 

!bt
\[
\left|\psi_{\mathrm{Initial}}\right\rangle=\bm{U}_{H}|0\rangle=\frac{1}{\sqrt{2}}\left[\begin{array}{cc}
1 & 1 \\
1 & -1
\end{array}\right]\begin{bmatrix} 1 \\ 0\end{bmatrix}=\frac{1}{\sqrt{2}}\begin{bmatrix} 1 \\ 1\end{bmatrix}.
\]
!et

This may not necessarily be the same basis into which the system was
initialized, but we  assume it is so and then we only have to keep track
of one basis.

!split
===== State evolution =====

The state evolves as
!bt
\begin{align*}
|\psi(t)\rangle=&\left(\exp{\imath t\left(E_{0}-\frac{1}{2}  V_z\right)}|0\rangle\langle 0|+\exp{\imath t\left(E_{1}+\frac{1}{2}  V_z\right)}|1\rangle\langle 1|\right)\left|\psi_{\mathrm{Initial}}\right\rangle\\
&=\frac{1}{\sqrt{2}} \exp{\imath t\left(E_{0}-\frac{1}{2}  V_z\right)}\begin{bmatrix}1 \\ \exp{\imath t\left(E_{1}-E_{0}+ V_z\right)}\end{bmatrix}
\end{align*}
!et

!split
===== Preparing for readout =====

This is then prepared for readout as

!bt
\[
\vert\psi_{\mathrm{Final}}\rangle=\frac{1}{2} \exp{\imath t(E_{0}-\frac{1}{2}  V_z)}
\begin{bmatrix} 1+\exp{\imath t(E_{1}-E_{0}+ V_z)} \\ 1-\exp{(\imath t(E_{1}-E_{0}+ V_z)}\end{bmatrix}.
\]
!et

!split
===== Transition probability =====

The transition probability
!bt
\begin{align*}
p_{|0\rangle \rightarrow|1\rangle}=\left|\left\langle 1 \mid \psi_{\mathrm{Final}}\right\rangle\right|^{2}=&\left|1-\exp{\imath t\left(E_{1}-E_{0}+ V_z\right)}\right|^{2}\\
&=\frac{1}{2}\left(1-\cos \left(t\left(E_{1}-E_{0}\right)+ V_z\right)\right)
\end{align*}
!et

!split
===== "Ramsey interferometry":"https://en.wikipedia.org/wiki/Ramsey_interferometry" =====

We know the difference in energy between $E_{1}$ and $E_{0}$, either
since we constructed the system or by taking measurements without the
external stimulus $V$, and we can control the time $t$ for which the
system is allowed to evolve under the external stimulus. Then we can
fix $t$ and take many measurements to estimate $p_{|0\rangle
\rightarrow|1\rangle}$, which then makes finding $tV_z$ a simple phase-estimation problem which gives us $
V_z$. The physical implementation of this process is known as Ramsey
Interferometry, and it can be done with arbitary initialization and
readout preparation unitary operators.

!split
===== Benefits of Entanglement =====

Up until now, we have said that we take many measurements of
$\left|\psi_{\text {Final }}\right\rangle$ to estimate $p_{|0\rangle
\rightarrow|1\rangle}$, but we have neglected the estimation
process. Assuming we can take $N$ measurements, either by having $N$
experimental apparatuses running in parallel or by taking $N$
different measurements of a (relatively) constant $V$ with a single
apparatus (this is what we will do below), the uncertainty in $p$, denoted as $\sigma_{p}$ (this is a
positive real number; not to be confused with the Pauli matrices),
scales as

!bt
\[
\sigma_{p} \propto \frac{1}{\sqrt{N}}
\]
!et

!split
===== Ramsey interferometry =====

If we consider Ramsey Interferometry as an example, see URL:"https://en.wikipedia.org/wiki/Ramsey_interferometry", then the
uncertainty in $V_z$, denoted $\sigma_{V}$,
scales as

!bt
\[
\sigma_{V} \propto \sigma_{p} \propto \frac{1}{\sqrt{N}}
\]
!et

This relationship is known as the standard quantum limit (SQL)
, see Giovannetti *et al.*, 2011, URL:"https://www.nature.com/articles/nphoton.2011.35",
but can also be explained with the law of
Large Numbers from statistics, where measuring $N$ similarly
distributed, well-behaved random variables gives the sample mean as an
estimator for the population mean and the sample variance divided by
the size of the sample as an uncertainty in the estimate of the
population mean.


!split
===== Key components of code for one qubit =====

!bblock Physical System:
o Hamiltonian: $\mathcal{H} = -\frac{\gamma B}{2}Z$ (we will set $\gamma=1$)
o Initial state: $\vert \psi_{\mathrm{Initial}}\rangle = \frac{1}{\sqrt{2}}(|0\rangle + |1\rangle)$, Hadamard gate
!eblock

!bblock Time Evolution:
o Calculated using matrix exponential: $U_{\mathcal{H}}(t) = \exp{-i\mathcal{H}t}$
o State at time $t$: $\vert \psi(t)\rangle = U_{\mathcal{H}}(t)\vert\psi_{\mathrm{Initial}} \rangle$
!eblock

!bblock Expectation Values:
o $\langle X\rangle$: Oscillates as $\cos(Bt)$
o $\langle Y\rangle$: Oscillates as $-\sin(Bt)$
o $\langle Z\rangle$: Remains constant at $0$
!eblock



!split
===== One-qubit program example (best seen using the jupyter-notebook) =====

!bc pycod
import numpy as np
from scipy.linalg import expm
import matplotlib.pyplot as plt

# Define single-qubit operations, Identity, Pauli, Hadamard and S matrices
Id = np.array([[1, 0], [0, 1]], dtype=complex)
X = np.array([[0, 1], [1, 0]], dtype=complex)
Y = np.array([[0, -1j], [1j, 0]], dtype=complex)
Z = np.array([[1, 0], [0, -1]], dtype=complex)
Had = np.array([[1, 1],[1, -1]], dtype=complex) / np.sqrt(2)
S = np.array([[1, 0],[0, 1j]], dtype=complex)

# Simulation parameters
B = 2 * np.pi  # Magnetic field strength (in angular frequency units)
times = np.linspace(0, 1, 200)  # Time range from 0 to 1 seconds

# Initial state: superposition state via Hadamard gate acting on |0>
psi0 =  np.array([1, 0], dtype=complex) # start with |0> then act with Hadamard
psi0 = Had @ psi0

# Lists to store expectation values
expect_x, expect_y, expect_z = [], [], []

for t in times:
   # Construct Hamiltonian
   H = B * Z/ 2
   # Calculate time evolution operator
   U = expm(-1j * H * t)
   # Evolve the initial state
   psi_t = U @ psi0
   # Calculate expectation values
   expect_x.append(np.vdot(psi_t, X @ psi_t).real)
   expect_y.append(np.vdot(psi_t, Y @ psi_t).real)
   expect_z.append(np.vdot(psi_t, Z @ psi_t).real)
# Plot results
plt.figure(figsize=(10, 6))
plt.plot(times, expect_x, label='<X>')
plt.plot(times, expect_y, label='<Y>')
plt.plot(times, expect_z, label='<Z>')
plt.xlabel('Time (s)')
plt.ylabel('Expectation value')
plt.title('Qubit Spin Evolution in a z-Directional Magnetic Field')
plt.legend()
plt.grid(True)
plt.show()

!ec

!split
===== Interpretation =====

o The oscillations in $X$ and $Y$ components demonstrate the Larmor precession caused by the magnetic field
o The frequency of oscillation is directly proportional to the magnetic field strength $B$
o This forms the basis for quantum sensing: measuring oscillation frequency allows precise determination of $B$

!split
===== To use this for sensing (protocol of Degen *et al.,* (2017)) =====

o Prepare the qubit in a known superposition state
o Let it evolve in the magnetic field for a known time
o Measure the expectation values
o Determine (here) $B$ from the oscillation frequency




!split
===== Feel free to play around with this code =====

o Change $B$ value to see different oscillation frequencies
o Adjust *time* array to observe different numbers of oscillations
o Add noise to simulate real-world sensing scenarios
o Implement actual measurement simulations instead of expectation values

This code provides a fundamental demonstration of quantum sensing
principles using a simple qubit system. Real-world implementations
would typically use more sophisticated techniques like Ramsey
interferometry or dynamical decoupling for enhanced sensitivity.


!split
===== More than one qubit =====

The nature of quantum systems allows for more information to be
extracted by exploiting entanglement between quantum systems. This is
the fundamental basis for the benefits of quantum computing over
classical computing, and quantum sensing has similar benefits over
classical sensing. Suppose we return to the example above, but rather
than initializing $N$ sensing qubits separately, we initialize
$\frac{N}{n}$ groups each with $n$ entangled quantum systems. Then we
have

!bt
\[
\left|\psi_{\text {Init }}\right\rangle=\frac{1}{\sqrt{2^{n}}}\left(|0\rangle^{\otimes n}+|1\rangle^{\otimes n}\right),
\]
!et
where $|0\rangle^{\otimes n}=|0\rangle \otimes \ldots \otimes|0\rangle, n$ times.


!split
===== After initialization =====

After initialization, each of the $n$ sensing qubits evolves to pick up a relative phase factor of $\exp{\imath t\left(E_{1}-E_{0}+ V_z\right)}$, which combined results in
!bt
\[
|\psi(t)\rangle=\mathcal{N}\left(|0\rangle^{\otimes n}+\exp{n \imath t\left(E_{1}-E_{0}+ V_z\right)}|1\rangle^{\otimes n}\right)
\]
!et

where $\mathcal{N}$ is just a factor to take care of normalization.

!split
===== Transition probability =====

The transition probability
!bt
\[
p_{|0\rangle \rightarrow|1\rangle}=\left|\left\langle 1 \mid \psi_{\text {Final }}\right\rangle\right|^{2}=\frac{1}{2}\left(1-\cos \left(t n\left(E_{1}-E_{0}\right)+n  V_z\right)\right)
\]
!et

!split
===== Role of entanglement =====

From this, we can see that through entangling $n$ sensing qubits, the
_signal_ we are trying to sense increases from $V_z \rightarrow n
V_z$, and with $\frac{N}{n}$ total measurements,
!bt
\[
\sigma_{V} \propto \frac{1}{n} \sigma_{p} \propto \frac{1}{n}\left(\frac{1}{\sqrt{\frac{N}{n}}}\right)=\frac{1}{\sqrt{N n}}
\]
!et
which means the error decreased by a factor of $\sqrt{n}$. In the case where $n=N$, the uncertainty now scales as
!bt
\[
\sigma_{V} \propto \frac{1}{N}
\]
!et
which is known as the Heisenberg limit, and is the
quantum-mechanically limited, maximal amount of information one can
get from taking $n$ quantum sensing measurements, see again Giovannetti *et al.*, at URL:"https://www.nature.com/articles/nphoton.2011.35".

!split
=====  Two qubits and entanglement =====

We will now look at a simple system where we can produce an entangled state. We focus on a two-qubit system.


Our computational basis states

!bt
\[
\vert 00\rangle = \vert 0\rangle_{\mathrm{A}}\otimes \vert 0\rangle_{\mathrm{B}}=\begin{bmatrix} 1 & 0 & 0 &0\end{bmatrix}^T,
\]
!et
and
!bt
\[
\vert 01\rangle = \vert 0\rangle_{\mathrm{A}}\otimes \vert 1\rangle_{\mathrm{B}}=\begin{bmatrix} 0 & 1 & 0 &0\end{bmatrix}^T,
\]
!et
and
!bt
\[
\vert 10\rangle = \vert 1\rangle_{\mathrm{A}}\otimes \vert 0\rangle_{\mathrm{B}}=\begin{bmatrix} 0 & 0 & 1 &0\end{bmatrix}^T,
\]
!et
and finally
!bt
\[
\vert 11\rangle = \vert 1\rangle_{\mathrm{A}}\otimes \vert 1\rangle_{\mathrm{B}}=\begin{bmatrix} 0 & 0 & 0 &1\end{bmatrix}^T.
\]
!et


!split
===== Simple system to lllustrate entanglement  =====

This system can be thought of as composed of two subsystems
$A$ and $B$. Each subsystem has computational basis states

!bt
\[
\vert 0\rangle_{\mathrm{A,B}}=\begin{bmatrix} 1 & 0\end{bmatrix}^T \hspace{1cm} \vert 1\rangle_{\mathrm{A,B}}=\begin{bmatrix} 0 & 1\end{bmatrix}^T.
\]
!et
The subsystems could represent single particles or composite many-particle systems of a given symmetry.


!split
===== Computational basis states =====

This leads to the many-body computational basis states

!bt
\[
\vert 00\rangle = \vert 0\rangle_{\mathrm{A}}\otimes \vert 0\rangle_{\mathrm{B}}=\begin{bmatrix} 1 & 0 & 0 &0\end{bmatrix}^T,
\]
!et
and
!bt
\[
\vert 01\rangle = \vert 0\rangle_{\mathrm{A}}\otimes \vert 1\rangle_{\mathrm{B}}=\begin{bmatrix} 0 & 1 & 0 &0\end{bmatrix}^T,
\]
!et
and
!bt
\[
\vert 10\rangle = \vert 1\rangle_{\mathrm{A}}\otimes \vert 0\rangle_{\mathrm{B}}=\begin{bmatrix} 0 & 0 & 1 &0\end{bmatrix}^T,
\]
!et
and finally
!bt
\[
\vert 11\rangle = \vert 1\rangle_{\mathrm{A}}\otimes \vert 1\rangle_{\mathrm{B}}=\begin{bmatrix} 0 & 0 & 0 &1\end{bmatrix}^T.
\]
!et

!split
===== Eigenstates of non-interacting Hamiltonian =====

These computational basis states define the eigenstates of the non-interacting  Hamiltonian
!bt
\[
H_0\vert 00 \rangle = \epsilon_{00}\vert 00 \rangle,
\]
!et
!bt
\[
H_0\vert 10 \rangle = \epsilon_{10}\vert 10 \rangle,
\]
!et
!bt
\[
H_0\vert 01 \rangle = \epsilon_{01}\vert 01 \rangle,
\]
!et
and
!bt
\[
H_0\vert 11 \rangle = \epsilon_{11}\vert 11 \rangle.
\]
!et

!split
===== Interaction part =====

The interacting part of the Hamiltonian $H_{\mathrm{I}}$ is given by the tensor product of two $\sigma_x$ and $\sigma_z$  matrices, respectively, that is
!bt
\[
H_{\mathrm{I}}=H_x\sigma_x\otimes\sigma_x+H_z\sigma_z\otimes\sigma_z,
\]
!et
where $H_x$ and $H_z$ are interaction strength parameters. Our final Hamiltonian matrix is given by
!bt
\[
\bm{H}=\begin{bmatrix} \epsilon_{00}+H_z & 0 & 0 & H_x \\
                       0  & \epsilon_{10}-H_z & H_x & 0 \\
		       0 & H_x & \epsilon_{01}-H_z & 0 \\
		       H_x & 0 & 0 & \epsilon_{11} +H_z \end{bmatrix}.
\] 
!et

!split
===== Entangled state =====

This system produces an initial state (we select the lowest-lying state) which is entangled (it acts like
a SWAP gate) transforming the system from $\vert 00\rangle$ at interaction strength $0$ to
!bt
\[
\vert \psi_{\mathrm{Initial}}\rangle=\alpha \vert 01\rangle +\beta \vert 10\rangle.
\]
!et
We can then act with a given probe on this state and study its time-evolution, in the same way as we studied the one-qubit system.

The code below (to be added) performs then
!bt
\[
\vert \psi(t)\rangle = \bm{U}_{\mathcal{H}}(\alpha \vert 01\rangle +\beta \vert 10\rangle). 
\]
!et

!split
===== Intermezzo (digression) on density matrices and entropy =====

The four eigenstates of the above Hamiltonian matrix can in turn be used to
define density matrices. As an example, the density matrix of the
first eigenstate (lowest energy $E_0$) $\Psi_0$ is given by the outerproduct

!bt
\[
\rho_0=\left(\alpha_{00}\vert 00 \rangle+\alpha_{10}\vert 10 \rangle+\alpha_{01}\vert 01 \rangle+\alpha_{11}\vert 11 \rangle\right)\left(\alpha_{00}^*\langle 00\vert+\alpha_{10}^*\langle 10\vert+\alpha_{01}^*\langle 01\vert+\alpha_{11}^*\langle 11\vert\right),
\]
!et

where the coefficients $\alpha_{ij}$ are the eigenvector coefficients
resulting from the solution of the above eigenvalue problem. 

!split
===== Subsystems =====

We can
then in turn define the density matrix for the subsets $A$ or $B$ as

!bt
\[
\rho_A=\mathrm{Tr}_B(\rho_{0})=\langle 0 \vert \rho_{0} \vert 0\rangle_{B}+\langle 1 \vert \rho_{0} \vert 1\rangle_{B},
\]
!et

or

!bt
\[
\rho_B=\mathrm{Tr}_A(\rho_0)=\langle 0 \vert \rho_{0} \vert 0\rangle_{A}+\langle 1 \vert \rho_{0} \vert 1\rangle_{A}.
\]
!et

!split
===== Entropies =====

The density matrices for these subsets can be used to compute the
so-called von Neumann entropy, which is one of the possible measures
of entanglement. A pure state has entropy equal zero while entangled
state have an entropy larger than zero. The von-Neumann entropy is
defined as

!bt
\[
S(A,B)=-\mathrm{Tr}\left(\rho_{A,B}\log_2 (\rho_{A,B})\right).
\]
!et

!split
===== Understanding the example =====
The example here shows the above von Neumann entropy based on the
density matrix for the lowest many-body state. We see clearly a jump
in the entropy around the point where we have a level crossing. At
interaction strenght $\lambda=0$ we have many-body states purely
defined by their computational basis states. As we switch on the
interaction strength, we obtain an increased degree of mixing and the
entropy increases till we reach the level crossing point where we see
an additional and sudden increase in entropy. Similar behaviors are
observed for the other states. The most important result from this
example is that entanglement is driven by the Hamiltonian itself and
the strength of the interaction matrix elements and the
non-interacting energies.


!split
===== Code, best seen in jupyter-notebook =====
!bc pycod
%matplotlib inline
from  matplotlib import pyplot as plt
import numpy as np
from scipy.linalg import logm, expm
def log2M(a): # base 2 matrix logarithm
    return logm(a)/np.log(2.0)

dim = 4
Hamiltonian = np.zeros((dim,dim))
#number of lambda values
n = 40
lmbd = np.linspace(0.0,1.0,n)
Hx = 2.0
Hz = 3.0
# Non-diagonal part as sigma_x tensor product with sigma_x
sx = np.matrix([[0,1],[1,0]])
sx2 = Hx*np.kron(sx, sx)
# Diagonal part as sigma_z tensor product with sigma_z
sz = np.matrix([[1,0],[0,-1]])
sz2 = Hz*np.kron(sz, sz)
noninteracting = [0.0, 2.5, 6.5, 7.0]
D = np.diag(noninteracting)
Eigenvalue = np.zeros((dim,n))
Entropy = np.zeros(n)

for i in range(n): 
    Hamiltonian = lmbd[i]*(sx2+sz2)+D
    # diagonalize and obtain eigenvalues, not necessarily sorted
    EigValues, EigVectors = np.linalg.eig(Hamiltonian)
    # sort eigenvectors and eigenvalues
    permute = EigValues.argsort()
    EigValues = EigValues[permute]
    EigVectors = EigVectors[:,permute]
    # Compute density matrix for selected system state, here ground state
    DensityMatrix = np.zeros((dim,dim))
    DensityMatrix = np.outer(EigVectors[:,0],EigVectors[:,0])
    # Project down on substates and find density matrix for subsystem
    d = np.matrix([[1,0],[0,1]])
    v1 = [1.0,0.0]
    proj1 = np.kron(v1,d)
    x1 = proj1 @ DensityMatrix @ proj1.T
    v2 = [0.0,1.0]
    proj2 = np.kron(v2,d)
    x2 = proj2 @ DensityMatrix @ proj2.T
    # Total density matrix for subsystem
    total = x1+x2
    # von Neumann Entropy for subsystem 
    Entropy[i] = -np.matrix.trace(total @ log2M(total))
    # Plotting eigenvalues and entropy as functions of interaction strengths
    Eigenvalue[0,i] = EigValues[0]
    Eigenvalue[1,i] = EigValues[1]
    Eigenvalue[2,i] = EigValues[2]
    Eigenvalue[3,i] = EigValues[3]
plt.plot(lmbd, Eigenvalue[0,:] ,'b-',lmbd, Eigenvalue[1,:],'g-',)
plt.plot(lmbd, Eigenvalue[2,:] ,'r-',lmbd, Eigenvalue[3,:],'y-',)
plt.xlabel('$\lambda$')
plt.ylabel('Eigenvalues')
plt.show()
plt.plot(lmbd, Entropy)
plt.xlabel('$\lambda$')
plt.ylabel('Entropy')          
plt.show
!ec


!split
===== Role of entanglement =====

In the example below, our initial state is an entangled Bell state
!bt
\[
\vert \psi_{\mathrm{Initial}}\rangle =\frac{1}{\sqrt{2}}\left( \vert 00\rangle +\vert 11\rangle\right).
\]
!et

We can then act with a given probe on this state and study its
time-evolution, in the same way as we studied the one-qubit system.

The code below ) performs then
!bt
\[
\vert \psi(t)\rangle = \bm{U}_{\mathcal{H}}\frac{1}{\sqrt{2}}\left( \vert 00\rangle +\vert 11\rangle\right).
\]
!et

Thereafter we implement an explicit measurement. Note that the code here is rather simple and 
does not compute these expectation values as one would when
implementing an experimental quantum sensing approach. Further improvements will include measurements on only one qubit and with more realistic _readout_ functions.



!split
===== Two-qubit program example (best seen using the jupyter-notebook) =====

!bc pycod
import numpy as np
from scipy.linalg import expm
import matplotlib.pyplot as plt

# Define single-qubit operations, Identity, Pauli, Hadamard and S matrices
Id = np.array([[1, 0], [0, 1]], dtype=complex)
X = np.array([[0, 1], [1, 0]], dtype=complex)
Y = np.array([[0, -1j], [1j, 0]], dtype=complex)
Z = np.array([[1, 0], [0, -1]], dtype=complex)
Had = np.array([[1, 1],[1, -1]], dtype=complex) / np.sqrt(2)
S = np.array([[1, 0],[0, 1j]], dtype=complex)
# Define two-qubit gates
CNOT01 = np.array([[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0]], dtype=complex)
CNOT10 = np.array([[1, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0], [0, 1, 0, 0]], dtype=complex)
SWAP = np.array([[1, 0, 0, 0], [0, 0, 1, 0], [0, 1, 0, 0], [0, 0, 0, 1]], dtype=complex)

times = np.linspace(0, 1, 100)  # Time range from 0 to 1 seconds

# Initial state for each qubit
psi_1 =  np.array([1, 0], dtype=complex) # start with |0> for qubits 1 and 2
psi_2 =  np.array([1, 0], dtype=complex) # start with |0> for qubits 1 and 2
# possible basis states for measurements
basis_00 = np.array([1, 0, 0, 0], dtype=complex)
basis_01 = np.array([0, 1, 0, 0], dtype=complex)
basis_10 = np.array([0, 0, 1, 0], dtype=complex)
basis_11 = np.array([0, 0, 0, 1], dtype=complex)
# then act with Hadamard on first qubit only
psi_1 = Had @ psi_1
# Initial two-qubit state
Psi_0 = np.kron(psi_1,psi_2)
# Then we act on this state in order to get a Bell state 1/sqrt(2)(|00>+|11)
Psi_0 = CNOT01 @ Psi_0
# Define parameters of Hamiltonian (Time-independent)
B = 1.0  # Strength of the magnetic field (in arbitrary units)
omega = B  # Frequency associated with the magnetic field
# Constructing the Hamiltonian H = -omega/2 * (Z * I + I * Z)
H_z_I = -omega / 2 * np.kron(Z, Id)  # Z * I
I_H_z = -omega / 2 * np.kron(Id, Z)    # I * Z
# Total Hamiltonian, try a more complicated one, this one is very simple
H = H_z_I + I_H_z   
# Lists to store expectation values
expect_00, expect_11 = [], []
for t in times:
   # Calculate time evolution operator
   U = expm(-1j * H * t)
   # Evolve the initial state (if you have a time-dependent H, remember to integrate)
   Psi_t = U @ Psi_0
   # Calculate probabilities of measuring specific states: P(|00>) and P(|11>)
   # Calculate expectation values (boring case here)
   expect_00.append(abs(np.dot(basis_00.conj(), Psi_t))**2)
   expect_11.append(abs(np.dot(basis_11.conj(), Psi_t))**2)

# Plotting results using matplotlib
plt.figure(figsize=(10, 6))
plt.plot(times, expect_00, label='Probability |00>')
plt.plot(times, expect_11, label='Probability |11>')
plt.xlabel('Time')
plt.ylabel('Probability')
plt.title('Quantum Sensing Simulation')
plt.legend()
plt.show()

!ec

!split
===== Analysis and additions =====

The result here is pretty boring, we just get $0.5$, as expected. The field acts only in the $z$-direction and is a constant. The probabilities are thus left unchanged.
Feel free to change the Hamiltonian. Here's a list of suggestion:
o More realistic Hamiltonian (keep in mind that if you make it time-dependent, you need to integrate over time. Different approximation exist.
o Change the measurements to say making a measurement on only one of the qubits
o More realistic readout functions and series of measurements as experiments
o Study different entangled states
o Find the field which acts on the system! How wuld you do that?
o Study the Fisher entropy and much more

Several of these additions will be added. 


!split
===== Conclusion =====


!bblock
The readout functions in quantum sensing serve as the crucial step in
extracting classical information from a quantum system after a set of
operations. In quantum magnetometry, for instance, the readout is
typically performed by measuring the qubit in the computational basis
and using the outcome (such as the probabilities of measuring
$\vert 0\rangle$ or $\vert 1\rangle$) to infer properties like the magnetic field
strength. In more complex systems, the readout functions could involve
more sophisticated measurements such as those based on quantum
tomography, where the state of the system is fully reconstructed from
measurement data.
!eblock 


!split
===== Other types of sensors =====

This process can be generalized to other types of quantum sensors,
such as those measuring electric fields, temperature, or time. The
general concept remains: we manipulate a quantum system, measure it,
and extract classical information to sense the desired physical
quantity.

The examples below illustrate the diversity of quantum sensing
applications, where quantum states (entanglement, superposition,
squeezing) or quantum systems (atoms, spins, photons) enable
breakthroughs in precision beyond classical limits.




!split
===== Magnetic Field Sensing with Nitrogen-Vacancy (NV) Centers =====

o Parameter: Magnetic field strength.  

!bblock
Method/platform: NV centers in diamond have electron spins sensitive to magnetic fields.
By optically detecting spin state changes (via fluorescence), magnetic
fields at the nanoscale are estimated with high spatial resolution,
useful in material science and biomedical imaging.
!eblock


!split
===== Atomic Clocks =====

o Parameter: Time/frequency.  

!bblock
Method/platform: Atomic transitions (e.g., in cesium or rubidium) serve as frequency standards. Quantum superposition states are probed to lock oscillator frequencies, enabling ultra-precise timekeeping critical for GPS and telecommunications.
!eblock

!split
===== Gravitational Wave Detection (LIGO) =====

o Parameter: Phase shift induced by spacetime ripples.  
!bblock
Method/platform: Squeezed light reduces quantum noise in interferometers, enhancing sensitivity to minute phase shifts caused by gravitational waves, pushing measurements below the standard quantum limit.
!eblock

!split
===== Quantum Thermometry =====

o Parameter: Temperature.  

!bblock
Method/platform**: Quantum probes like trapped ions or superconducting qubits exploit temperature-dependent decoherence or energy-level shifts to measure microkelvin-scale temperatures in cryogenic systems.
!eblock

!split
===== Entangled Photon Interferometry =====

o Parameter: Optical phase shifts.
!bblock
Method/platform: Entangled photons in interferometers achieve sub-shot-noise precision, enabling enhanced measurements of distances or refractive indices for applications in metrology and imaging.
!eblock

!split
===== Electric Field Sensing with Rydberg Atoms =====
o Parameter: Electric field strength.  

!bblock
Method/platform: Rydberg atoms, highly sensitive to electric fields due to their large polarizability, detect field-induced Stark shifts via microwave spectroscopy, useful in electrometry and communications.
!eblock

!split
===== Quantum Gyroscopes =====

o Parameter: Rotation rate.  

!bblock
Method/platform: Cold atom interferometers or entangled particles exploit the Sagnac effect to measure rotation with quantum-enhanced precision, advancing inertial navigation systems.
!eblock


!split
===== Molecular Concentration Sensing =====
o Parameter: Chemical concentration.  

!bblock
Method/platform: Spin defects in diamond (e.g., NV centers) detect local magnetic perturbations from target molecules, enabling nanoscale NMR spectroscopy for biological or chemical analysis.
!eblock

!split
===== Superconducting Quantum Interference Devices (SQUIDs) =====

o Parameter: Magnetic flux.  

!bblock
Method/platform: SQUIDs leverage flux quantization and Josephson junctions to measure extremely weak magnetic fields, applied in magnetoencephalography (MEG) for brain activity mapping.
!eblock

